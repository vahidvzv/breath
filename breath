#include <MIDI.h> //FortySevenEffects Arduino MIDI Library
// Also requires Arcore Arduino core for USB MIDI


MIDI_CREATE_DEFAULT_INSTANCE();;


//_______________________________________________________________________________________________ DECLARATIONS


#define CC_Interval 10  // Interval for sending CC data
#define CC_Number 11     // Controller number (2=Breath, 1=Mod Wheel, 7=Volume, 11=Expression, 74=Cutoff)
#define AT_Enable 0     // Send breath as channel aftertouch (0=Off, 1=On, 2=Exclusively)
#define POT_Avail 1     // Potentiometers installed at A0 and A1?

unsigned long ccSendTime = 0L;     // The last time we sent CC values

int pressureSensor=0;// pressure data from breath sensor, for midi breath cc and breath threshold checks
byte itsOn=0;        // keep track and make sure we send CC with 0 value when off threshold
int ON_Thr=0;      // Set threshold level before switching ON (Value used if no pots installed. MPXV5004GP->350, MPX5010GP->40)
int breath_max=1023; // Upper limit for pressure (Value used if no pots installed. MPXV5004GP->1023, MPX5010GP->300)

int x;
byte LedPin=5;    // select the pin for the activity LED
byte PwrLedPin=5; // select the pin for the power LED
byte pot1=A0;
byte pot2=A1;
byte pina3=A3;
byte channel=1;    // MIDI channel (1-16)
float smooth=0.7; // smoothing value

//_______________________________________________________________________________________________ SETUP

void setup() {
  pinMode(pot1,INPUT_PULLUP);
  pinMode(pot2,INPUT_PULLUP);
  pinMode(pina3,INPUT_PULLUP);
  pinMode(LedPin,OUTPUT);
  pinMode(2,OUTPUT);
  digitalWrite(2,LOW); // set pin 2 low to enable DIN MIDI on MIB mkII board
  
  MIDI.begin(channel);
  
for (x=1; x<=10; x++){  // Do the flashy-flashy to say we are up and running
    digitalWrite( LedPin, HIGH );
    delay(15);
    digitalWrite( LedPin, LOW );
    delay(200);
  }
}


//_______________________________________________________________________________________________ MAIN LOOP

void loop() {
  if (POT_Avail) {
    ON_Thr=map(analogRead(A0),200,4500,505,1023);  // set threshold value with potentiometer on A0
    breath_max=map(analogRead(A1),0,500,599,900); // set max value with potentiometer on A1
    if ((ON_Thr+127) > breath_max){            // make sure max value always has a minimum offset from thr
      breath_max=ON_Thr+70;
    }
  }
  pressureSensor=pressureSensor*(1-smooth)+analogRead(A3)*smooth;   // get pressure sensor data, do some smoothing
  MIDI.read();
  if (millis() - ccSendTime > CC_Interval) {  // is it time for sending breath data?
   if (pressureSensor >= ON_Thr) {            // if we are over the threshold, send breath
     breath();    
     itsOn=1;
    } else if (itsOn) {                       // we have just gone below threshold, so send zero value
     breathOff();
     itsOn=0;
    }
    ccSendTime = millis();                   // reset cc timer
  }  
}

//_______________________________________________________________________________________________ FUNCTIONS

void breath(){
  int breathCC;
  breathCC = map(constrain(pressureSensor,ON_Thr,breath_max),ON_Thr,breath_max,1,127);
  if (AT_Enable != 2) {
    MIDI.sendControlChange(CC_Number, breathCC, channel);
    controlChange(channel-1, CC_Number, breathCC);
    }{
     MIDI.sendControlChange(CC_Number, breathCC, 2);
    controlChange(2, CC_Number, breathCC);
  }{
     MIDI.sendControlChange(CC_Number, breathCC, 3);
    controlChange(3, CC_Number, breathCC);
  }
  if (AT_Enable) {
    MIDI.sendAfterTouch(breathCC, channel);
    channelAT(channel-1, breathCC);
  }
  analogWrite(LedPin, breathCC);
}



//***********************************************************

void breathOff(){
  if (AT_Enable != 2) {
    MIDI.sendControlChange(CC_Number, 0, channel);
    controlChange(channel-1, CC_Number, 0);
  }
  if (AT_Enable) {
    MIDI.sendAfterTouch(0, channel);
    channelAT(channel-1, 0);
  }
  digitalWrite(LedPin, LOW);
}

//***********************************************************
// Arcore MIDI functions

void controlChange(byte channel, byte control, byte value) {
  MIDIEvent event = {0x0B, 0xB0 | channel, control, value};
  MIDIUSB.write(event);
}

void channelAT(byte channel, byte value) {
 MIDIEvent event = {0x0D, 0xD0 | channel, value};
  MIDIUSB.write(event);
}
